xlab="monthly return", ylab="density estimate", col="slateblue1")
qqnorm(return_matrix[,"VBLTX"], col="slateblue1")
qqline(return_matrix[,"VBLTX"])
par(mfrow=c(1,1))
chart.CumReturns(simple_returns, wealth.index = TRUE, legend.loc = "topleft", main = "Future Value of $1 invested")
# Generate four panel plots
par(mfrow=c(2,2))
hist(return_matrix[,"VBLTX"],main="VBLTX monthly returns",
xlab="VBLTX", probability=T, col="slateblue1")
boxplot(return_matrix[,"VBLTX"],outchar=T, main="Boxplot", col="slateblue1")
plot(density(return_matrix[,"VBLTX"]),type="l", main="Smoothed density",
xlab="monthly return", ylab="density estimate", col="slateblue1")
qqnorm(return_matrix[,"VBLTX"], col="slateblue1")
qqline(return_matrix[,"VBLTX"])
par(mfrow=c(1,1))
chart.Boxplot(all_returns, names = TRUE, colorset = "slateblue1")
summary(return_matrix)
# A nice PerformanceAnalytics function that computes all of the relevant descriptive statistics is table.Stats
table.Stats(all_returns)
apply(return_matrix, 2, sd)*sqrt(12);
pairs(return_matrix, pch = 16, col = "slateblue1")
cor(return_matrix)
log((29.49)-log(28.64)
)
log(29.49)-log(28.64)
log(109.04)-log(105.06)
exp(43)-1
exp(12*3.7)-1
12*0.02924688
12*0.03718317
10000+10000*.038^12
3.8^12
10000+10000*1.038^12
10000*1.038^12
10000*1.03^12
100000*qnorm(.05, mean = .01, sd = .05)
100000*qnorm(.05, mean = .01, sd = .09)
-7224.268+-13803.68
100000*qnorm(.05, mean = 12*.01, sd = sqrt(12)*.09)
100000*qnorm(.05, mean = 12*.01, sd = sqrt(12)*.05)
swirl()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(head)
tail(head, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean = 100, sd = 25, 10)
rpois(5)
rpois(mean = 10, 5)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Data_Analysis")
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.packages("dplyr")
install.packages("dplyr")
packageVersion("dplyr")
install.packages("foreign")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type = "source")
library(RMySQL)
omega(dbReadTable(conn = con,name = 'Test'), title = "9 variables from Thurstone")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot
qplot(votes, rating, data = movies) + stats_smooth("loess")
install.packages("knitr")
install.packages("markdown")
prnorm(70, mean = 80, sd = 10)
library(stats)
prnorm(70, mean = 80, sd = 10)
pnorm(70, mean = 80, sd = 10)
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(p = 95, mean = 1100, sd = 75)
qnorm( = 95, mean = 1100, sd = 75)
qnorm(95, mean = 1100, sd = 75)
dnorm(95, mean = 1100, sd = 75)
qnorm(.95)
qnorm(.95, mean = 1100, sd = 75)
.5^5
.5^4
choose(5,4) * .5^5 + choose(5,5) *.5^5
choose(5,4) + choose(5,5)
.5^4*.5+.5^5
.5^9*.5+.5^10
ppois(10, mean = 5)
ppois(10, lambda = 5)
ppois(10, lambda = 5/3)
ppois(9, lambda = 5)
ppois(9, lambda = 5, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 10)
pnorm(16, mean = 15, sd = 10)
qnorm(.95, mean = 1100, sd = 75/sqrt(100))
pnorm(5, mean = 11, sd = 2)
ppois(9, lambda = 5/3, lower.tail = FALSE)
ppois(10, lambda = 5*3)
ppois(40, lambda = 9*5)
posson.test(x, T= 10)$conf
possoin.test(x, T= 10)$conf
poisson.test(x, T= 10)$conf
poisson.test(10, T= 94.32)$conf
poisson.test(10*60, T= 94.32)$conf
poisson.test(10, T= 60)$conf
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
fit
summary(fit)
str(mtcars)
cars_lm <- lm(data = mtcars, wt~mpg)
summar(cars_lm)
summaru(cars_lm)
summary(cars_lm)
cars_lm
?mtcars
6.0473-2*0.30869
x<- c(1,2,3,4)
x*2
x
predict(cars_lm, newdata = 3000 pounds)
predict(cars_lm, newdata = 3000 )
predict(cars_lm, newdata = data.frame(carat(3000)) )
predict(cars_lm, newdata = data.frame(carat =3000) )
x <- (1000,2000,3000)
x <- c(1000,2000,3000)
predict(cars_lm, newdata = data.frame(carat = x) )
predict(cars_lm, newdata = data.frame(x)
)
mtcarscopy = mtcars
mtcarscopy <- c(1000,2000,3000)
predict(cars_lm, newdata = data.frame(mtcarscopy)
)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
predict(cars_lm, newdata = data.frame(x = 3000),interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3000), interval="confidence")
fit
summary(fit)
fit1<-lm(mtcars$mpg ~ mtcars$wt)
predict(fit1,data.frame(x=3000), interval="confidence")
summary(fit1)
str(fit1)
fit1$coefficient[1] + 3*fit1$coefficient[2]
fit1$coefficient[1] + 3*fit1$coefficient[2] + 2*0.5591
fit1$coefficient[1] + 2*fit1$coefficient[2]
fit1$coefficient[0] + 2*fit1$coefficient[1]
library(datasets)
data(iris)
str(iris)
sapply(iris, mean)
table(mean(iris$Sepal.Length))
table(mean(iris$Sepal.Length), iris$species)
table(mean(iris$Sepal.Length), iris$Species)
table(iris$Species, mean(iris$Sepal.Length))
sapply(iris, iris$Species, mean)
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
str(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
with(mtcars, tapply(hp, cyl, mean))
mean(mtcars$hp[mtcars$cyl == 8]) - mean(mtcars$hp[mtcars$cyl == 4])
209.21429 -82.63636
debug(ls)
ls
ls()
q
set.seed(1)
rpois(5, 2)
rpois(5,2)
set.seed(1)
rpois(5, 2)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/Untitled.R')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/Untitled.R')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/Untitled.R')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/Untitled.R')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
setwd("~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
str(outcome)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
state_names <- outcome$State
summary(state_name)
summary(state_names)
str(state_names)
unique(state_names)
state_names <- unique(outcome$State)
state_names
"AL" %in% state_names
"BL" %in% state_names
?strop
?stop
"heart attack" %in% c("heart attack", "heart failure", "pneumonia")
"heart atack" %in% c("heart attack", "heart failure", "pneumonia")
str(outcome)
dat <- outcome[outcome$State == TX, 11]
dat <- outcome[outcome$State == "TX", 11]
str(dat)
dat <- outcome[outcome$State == "TX", c(1,11)]
str(dat)
dat <- outcome[outcome$State == "TX", c(2,7,11)]
str(dat)
dat <- outcome[outcome$State == "NY", c(2,23)]
str(dat)
dat
outcome[, 23] <- as.numeric(outcome[, 23], na.rm = TRUE)
dat <- outcome[outcome$State == "NY", c(2,23)]
dat
min(dat[,2], na.rm = TRUE)
dat <- dat[!is.na(dat[,2])]
dat <- dat[!is.na(dat[,2]),]
dat
dat <- dat[!is.na(dat[,2]),]
sort(dat)
dat <- dat[!is.na(dat[,2]),]
str(dat)
sort(dat)
sort(dat[,2])
new_dat <- dat[order(dat[,2]),]
newdat
new_dat
new_dat <- dat[order(dat[,2],dat[,1])),]
new_dat <- dat[order(dat[,2],dat[,1]),]
new_dat
new_dat[1,1]
# MKarp94# Coursera - R Programming - Data Science Specialization# Programming Assignment 3.R - best.Rbest <- function(state, outcome) {    ## Read outcome data    outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        ## create vector of valid state names    state_names <- unique(outcome$State)        ## Check that state and outcome are valid    if (state %in% state_names) {        stop("invalid state")    }    else if !(outcome %in% c("heart attack", "heart failure", "pneumonia")) {        stop("invalid outcome")    }    else {        ## Return hospital name in that state with lowest 30-day death rate        ## get index of column based on outcome provided        dat <- NA        if (outcome == "heart attack"){            ## outcome == heart attack; col 11            outcome[, 11] <- as.numeric(outcome[, 11])            dat <- outcome[outcome$State == state, c(2,11)]        }        if (outcome == "heart failure"){            ## outcome == heart failure; col 17            outcome[, 17] <- as.numeric(outcome[, 17])            dat <- outcome[outcome$State == state, c(2,17)]        }        if (outcome == "pneumonia"){            ## outcome == pneumonia; col 23            outcome[, 23] <- as.numeric(outcome[, 23], na.rm = TRUE)            dat <- outcome[outcome$State == state, c(2,23)]        }        dat <- dat[!is.na(dat[,2]),]        new_dat <- dat[order(dat[,2],dat[,1])),]new_dat[1,1]    }}
# MKarp94# Coursera - R Programming - Data Science Specialization# Programming Assignment 3.R - best.Rbest <- function(state, outcome) {    ## Read outcome data    outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        ## create vector of valid state names    state_names <- unique(outcome$State)        ## Check that state and outcome are valid    if (state %in% state_names) {        stop("invalid state")    }    else if !(outcome %in% c("heart attack", "heart failure", "pneumonia")) {        stop("invalid outcome")    }    else {        ## Return hospital name in that state with lowest 30-day death rate        ## get index of column based on outcome provided        dat <- NA        if (outcome == "heart attack"){            ## outcome == heart attack; col 11            outcome[, 11] <- as.numeric(outcome[, 11])            dat <- outcome[outcome$State == state, c(2,11)]        }        if (outcome == "heart failure"){            ## outcome == heart failure; col 17            outcome[, 17] <- as.numeric(outcome[, 17])            dat <- outcome[outcome$State == state, c(2,17)]        }        if (outcome == "pneumonia"){            ## outcome == pneumonia; col 23            outcome[, 23] <- as.numeric(outcome[, 23], na.rm = TRUE)            dat <- outcome[outcome$State == state, c(2,23)]        }        dat <- dat[!is.na(dat[,2]),]        new_dat <- dat[order(dat[,2],dat[,1])),]        new_dat[1,1]    }}
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_names <- unique(outcome$State)
if (state %in% state_names) {    stop("invalid state")}
best <- function(state, outcome) {
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_names <- unique(outcome$State)
if (state %in% state_names) {
stop("invalid state")
}
else if !(outcome %in% c("heart attack", "heart failure", "pneumonia")) {
!("TX" %in% state_names)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
new_dat <- dat[order(dat[,2],dat[,1])),]
new_dat <- dat[order(dat[,2],dat[,1]),]
new_dat[1,1]
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
?best
??best
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
str(outcome_list)
state_names <- unique(outcome$State)outcome_list <- list("heart attack", "heart failure", "pneumonia")
str(outcome_list)
outcome_list <- list("heart attack", "heart failure", "pneumonia")
str(outcome_list)
str(state_names)
outcome_list <- unique("heart attack", "heart failure", "pneumonia")
outcome_list <- c("heart attack", "heart failure", "pneumonia")
str(outcome_list)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
"heart_attack" %in% outcome_list
outcome_list
'heart_attack' %in% outcome_list
'heart attack' %in% outcome_list
"heart attack" %in% outcome_list
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
outcome <- "heart attack"
outcome %in% outcome_list
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/best.r')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("submitscript3.R")
submit()
submit()
submit()
ncol(new_dat)
nrow(new_dat)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
final_frame <- data.frame()
str(final_frame)
state_names
for (state in state_names) {}
for (state in state_names) {state}
for (state in state_names) {print state}
for (state in state_names) {print(state)}
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
?data.frame
final_frame <- data.frame(c(1:52), c(1:52))
final_frame
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
final_frame
names(final_frame) <- c("hospital", "state")
str(final_frame)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
str(final_frame)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
str(final_frame)
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
head(rankall("heart attack", 20), 10)
submit()
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
tail(rankall("heart failure"), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
tail(rankall("heart failure"), 10)
source('~/datasciencecoursera/R Programming/ProgrammingAssignment3/rprog-data-ProgAssignment3-data/rankall.r')
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
